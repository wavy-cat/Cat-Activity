import {Config} from "../config";
import {writeFile} from "fs/promises";
import {fileIcons} from "../vscode-icons/src/defaults/fileIcons";

const template = `// This file is automatically generated by Assets Builder.
// DO NOT MODIFY IT MANUALLY!

package cat.wavy.catactivity.types

enum class FileType(
    val typeName: String,
    val icon: String
) {
    %fileTypes%
}

fun getFileTypeByName(fileType: String, fileName: String, extension: String?) = when (fileName.lowercase()) {
    %fileNameMatch%
    else -> when (fileType) {
        %fileTypeMatch%
        else -> when (extension?.lowercase()) {
            %fileExtensionMatch%
            else -> FileType.FILE
        }
    }
}`

export type Files = {
    enumName: string
    name: string
    icon: string
    fileNames: string[] | null | undefined
    fileTypes: string[] | null | undefined
    fileExtensions: string[] | null | undefined
}

function formatFileTypes(files: Files[]): string {
    const items: string[] = []

    for (let file of files) {
        items.push(`${file.enumName}("${file.name}", "${file.icon}")`)
    }

    return items.join(",\n    ")
}

function formatFilesMatch(files: Files[], propertyName: string, tabNum: number): string {
    const items: string[] = []

    for (let file of files) {
        if (!(file[propertyName])) continue
        items.push(`"${file[propertyName].join('", "')}" -> FileType.${file.enumName}`)
    }

    return items.join('\n' + ' '.repeat(4 * tabNum))
}

export async function code_generation(config: Config) {
    const items: Files[] = []

    for (let icon in config.fileIcons) {
        const property = config.fileIcons[icon]
        const enumName = property.enumName ? property.enumName : icon.toUpperCase().replace(/-/g, "_")
        items.push({
            icon: icon,
            name: property.title,
            enumName: enumName,
            fileTypes: property.fileTypes,
            fileExtensions: property.extensions === undefined ? fileIcons[icon].fileExtensions : property.extensions,
            fileNames: property.fileNames === undefined ? fileIcons[icon].fileNames : property.fileNames
        })
    }

    const code = template
        .replace('%fileTypes%', formatFileTypes(items))
        .replace('%fileNameMatch%', formatFilesMatch(items, 'fileNames', 1))
        .replace('%fileTypeMatch%', formatFilesMatch(items, 'fileTypes', 2))
        .replace('%fileExtensionMatch%', formatFilesMatch(items, 'fileExtensions', 3))
    const outputPath = 'src/main/kotlin/cat/wavy/catactivity/types/FileType.kt'

    await writeFile(outputPath, code)
}
